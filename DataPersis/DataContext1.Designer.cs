//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 9/26/2017 3:32:46 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace Medicapp13Context
{

    [DatabaseAttribute(Name = "medicapp1.3")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class Medicapp13DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(Medicapp13DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertMedicina(Medicina instance);
        partial void UpdateMedicina(Medicina instance);
        partial void DeleteMedicina(Medicina instance);
        partial void InsertTipo(Tipo instance);
        partial void UpdateTipo(Tipo instance);
        partial void DeleteTipo(Tipo instance);
        partial void InsertAlergicita(Alergicita instance);
        partial void UpdateAlergicita(Alergicita instance);
        partial void DeleteAlergicita(Alergicita instance);
        partial void InsertAlergia(Alergia instance);
        partial void UpdateAlergia(Alergia instance);
        partial void DeleteAlergia(Alergia instance);
        partial void InsertParametrizacion(Parametrizacion instance);
        partial void UpdateParametrizacion(Parametrizacion instance);
        partial void DeleteParametrizacion(Parametrizacion instance);
        partial void InsertHojaDeVida(HojaDeVida instance);
        partial void UpdateHojaDeVida(HojaDeVida instance);
        partial void DeleteHojaDeVida(HojaDeVida instance);
        partial void InsertCirucita(Cirucita instance);
        partial void UpdateCirucita(Cirucita instance);
        partial void DeleteCirucita(Cirucita instance);
        partial void InsertMedicita(Medicita instance);
        partial void UpdateMedicita(Medicita instance);
        partial void DeleteMedicita(Medicita instance);
        partial void InsertHorario(Horario instance);
        partial void UpdateHorario(Horario instance);
        partial void DeleteHorario(Horario instance);
        partial void InsertCita(Cita instance);
        partial void UpdateCita(Cita instance);
        partial void DeleteCita(Cita instance);

        #endregion

        public Medicapp13DataContext() :
        base(GetConnectionString("Medicapp13DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public Medicapp13DataContext(MappingSource mappingSource) :
        base(GetConnectionString("Medicapp13DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public Medicapp13DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Medicapp13DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Medicapp13DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Medicapp13DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Medicina> Medicinas
        {
            get
            {
                return this.GetTable<Medicina>();
            }
        }

        public Devart.Data.Linq.Table<Tipo> Tipos
        {
            get
            {
                return this.GetTable<Tipo>();
            }
        }

        public Devart.Data.Linq.Table<Alergicita> Alergicitas
        {
            get
            {
                return this.GetTable<Alergicita>();
            }
        }

        public Devart.Data.Linq.Table<Alergia> Alergias
        {
            get
            {
                return this.GetTable<Alergia>();
            }
        }

        public Devart.Data.Linq.Table<Parametrizacion> Parametrizacions
        {
            get
            {
                return this.GetTable<Parametrizacion>();
            }
        }

        public Devart.Data.Linq.Table<HojaDeVida> HojaDeVidas
        {
            get
            {
                return this.GetTable<HojaDeVida>();
            }
        }

        public Devart.Data.Linq.Table<Cirucita> Cirucitas
        {
            get
            {
                return this.GetTable<Cirucita>();
            }
        }

        public Devart.Data.Linq.Table<Medicita> Medicitas
        {
            get
            {
                return this.GetTable<Medicita>();
            }
        }

        public Devart.Data.Linq.Table<Horario> Horarios
        {
            get
            {
                return this.GetTable<Horario>();
            }
        }

        public Devart.Data.Linq.Table<Cita> Citas
        {
            get
            {
                return this.GetTable<Cita>();
            }
        }
    }
}

namespace Medicapp13Context
{

    /// <summary>
    /// There are no comments for Medicapp13Context.Medicina in the schema.
    /// </summary>
    [Table(Name = @"hospital.medicinas")]
    public partial class Medicina : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdMedicina;

        private string _NombreMedicina;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdMedicinaChanging(int value);
        partial void OnIdMedicinaChanged();
        partial void OnNombreMedicinaChanging(string value);
        partial void OnNombreMedicinaChanged();
        #endregion

        public Medicina()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdMedicina in the schema.
        /// </summary>
        [Column(Name = @"id_medicina", Storage = "_IdMedicina", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdMedicina
        {
            get
            {
                return this._IdMedicina;
            }
            set
            {
                if (this._IdMedicina != value)
                {
                    this.OnIdMedicinaChanging(value);
                    this.SendPropertyChanging("IdMedicina");
                    this._IdMedicina = value;
                    this.SendPropertyChanged("IdMedicina");
                    this.OnIdMedicinaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NombreMedicina in the schema.
        /// </summary>
        [Column(Name = @"nombre_medicina", Storage = "_NombreMedicina", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NombreMedicina
        {
            get
            {
                return this._NombreMedicina;
            }
            set
            {
                if (this._NombreMedicina != value)
                {
                    this.OnNombreMedicinaChanging(value);
                    this.SendPropertyChanging("NombreMedicina");
                    this._NombreMedicina = value;
                    this.SendPropertyChanged("NombreMedicina");
                    this.OnNombreMedicinaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.Tipo in the schema.
    /// </summary>
    [Table(Name = @"hospital.tipo")]
    public partial class Tipo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdTipo;

        private string _Tipo1;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdTipoChanging(int value);
        partial void OnIdTipoChanged();
        partial void OnTipo1Changing(string value);
        partial void OnTipo1Changed();
        #endregion

        public Tipo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdTipo in the schema.
        /// </summary>
        [Column(Name = @"id_tipo", Storage = "_IdTipo", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdTipo
        {
            get
            {
                return this._IdTipo;
            }
            set
            {
                if (this._IdTipo != value)
                {
                    this.OnIdTipoChanging(value);
                    this.SendPropertyChanging("IdTipo");
                    this._IdTipo = value;
                    this.SendPropertyChanged("IdTipo");
                    this.OnIdTipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tipo1 in the schema.
        /// </summary>
        [Column(Name = @"tipo", Storage = "_Tipo1", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tipo1
        {
            get
            {
                return this._Tipo1;
            }
            set
            {
                if (this._Tipo1 != value)
                {
                    this.OnTipo1Changing(value);
                    this.SendPropertyChanging("Tipo1");
                    this._Tipo1 = value;
                    this.SendPropertyChanged("Tipo1");
                    this.OnTipo1Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.Alergicita in the schema.
    /// </summary>
    [Table(Name = @"hospital.alergicita")]
    public partial class Alergicita : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdAlergias;

        private string _DescripcionAlergia;

        private int _IdUser;

        private int _IdCita;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdAlergiasChanging(int value);
        partial void OnIdAlergiasChanged();
        partial void OnDescripcionAlergiaChanging(string value);
        partial void OnDescripcionAlergiaChanged();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnIdCitaChanging(int value);
        partial void OnIdCitaChanged();
        #endregion

        public Alergicita()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdAlergias in the schema.
        /// </summary>
        [Column(Name = @"id_alergias", Storage = "_IdAlergias", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdAlergias
        {
            get
            {
                return this._IdAlergias;
            }
            set
            {
                if (this._IdAlergias != value)
                {
                    this.OnIdAlergiasChanging(value);
                    this.SendPropertyChanging("IdAlergias");
                    this._IdAlergias = value;
                    this.SendPropertyChanged("IdAlergias");
                    this.OnIdAlergiasChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DescripcionAlergia in the schema.
        /// </summary>
        [Column(Name = @"descripcion_alergia", Storage = "_DescripcionAlergia", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DescripcionAlergia
        {
            get
            {
                return this._DescripcionAlergia;
            }
            set
            {
                if (this._DescripcionAlergia != value)
                {
                    this.OnDescripcionAlergiaChanging(value);
                    this.SendPropertyChanging("DescripcionAlergia");
                    this._DescripcionAlergia = value;
                    this.SendPropertyChanged("DescripcionAlergia");
                    this.OnDescripcionAlergiaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCita in the schema.
        /// </summary>
        [Column(Name = @"id_cita", Storage = "_IdCita", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdCita
        {
            get
            {
                return this._IdCita;
            }
            set
            {
                if (this._IdCita != value)
                {
                    this.OnIdCitaChanging(value);
                    this.SendPropertyChanging("IdCita");
                    this._IdCita = value;
                    this.SendPropertyChanged("IdCita");
                    this.OnIdCitaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.Alergia in the schema.
    /// </summary>
    [Table(Name = @"hospital.alergia")]
    public partial class Alergia : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdAlergia;

        private string _NombreAlergia;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdAlergiaChanging(int value);
        partial void OnIdAlergiaChanged();
        partial void OnNombreAlergiaChanging(string value);
        partial void OnNombreAlergiaChanged();
        #endregion

        public Alergia()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdAlergia in the schema.
        /// </summary>
        [Column(Name = @"id_alergia", Storage = "_IdAlergia", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdAlergia
        {
            get
            {
                return this._IdAlergia;
            }
            set
            {
                if (this._IdAlergia != value)
                {
                    this.OnIdAlergiaChanging(value);
                    this.SendPropertyChanging("IdAlergia");
                    this._IdAlergia = value;
                    this.SendPropertyChanged("IdAlergia");
                    this.OnIdAlergiaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NombreAlergia in the schema.
        /// </summary>
        [Column(Name = @"nombre_alergia", Storage = "_NombreAlergia", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NombreAlergia
        {
            get
            {
                return this._NombreAlergia;
            }
            set
            {
                if (this._NombreAlergia != value)
                {
                    this.OnNombreAlergiaChanging(value);
                    this.SendPropertyChanging("NombreAlergia");
                    this._NombreAlergia = value;
                    this.SendPropertyChanged("NombreAlergia");
                    this.OnNombreAlergiaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.Parametrizacion in the schema.
    /// </summary>
    [Table(Name = @"hospital.parametrizacion")]
    public partial class Parametrizacion : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdParemetrizacion;

        private System.Nullable<System.TimeSpan> _DuracionCitas;

        private System.Nullable<System.TimeSpan> _HoraInicio;

        private System.Nullable<System.TimeSpan> _HoraFin;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdParemetrizacionChanging(int value);
        partial void OnIdParemetrizacionChanged();
        partial void OnDuracionCitasChanging(System.Nullable<System.TimeSpan> value);
        partial void OnDuracionCitasChanged();
        partial void OnHoraInicioChanging(System.Nullable<System.TimeSpan> value);
        partial void OnHoraInicioChanged();
        partial void OnHoraFinChanging(System.Nullable<System.TimeSpan> value);
        partial void OnHoraFinChanged();
        #endregion

        public Parametrizacion()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdParemetrizacion in the schema.
        /// </summary>
        [Column(Name = @"id_paremetrizacion", Storage = "_IdParemetrizacion", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdParemetrizacion
        {
            get
            {
                return this._IdParemetrizacion;
            }
            set
            {
                if (this._IdParemetrizacion != value)
                {
                    this.OnIdParemetrizacionChanging(value);
                    this.SendPropertyChanging("IdParemetrizacion");
                    this._IdParemetrizacion = value;
                    this.SendPropertyChanged("IdParemetrizacion");
                    this.OnIdParemetrizacionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DuracionCitas in the schema.
        /// </summary>
        [Column(Name = @"duracion_citas", Storage = "_DuracionCitas", DbType = "TIME", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.TimeSpan> DuracionCitas
        {
            get
            {
                return this._DuracionCitas;
            }
            set
            {
                if (this._DuracionCitas != value)
                {
                    this.OnDuracionCitasChanging(value);
                    this.SendPropertyChanging("DuracionCitas");
                    this._DuracionCitas = value;
                    this.SendPropertyChanged("DuracionCitas");
                    this.OnDuracionCitasChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HoraInicio in the schema.
        /// </summary>
        [Column(Name = @"hora_inicio", Storage = "_HoraInicio", DbType = "TIME", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.TimeSpan> HoraInicio
        {
            get
            {
                return this._HoraInicio;
            }
            set
            {
                if (this._HoraInicio != value)
                {
                    this.OnHoraInicioChanging(value);
                    this.SendPropertyChanging("HoraInicio");
                    this._HoraInicio = value;
                    this.SendPropertyChanged("HoraInicio");
                    this.OnHoraInicioChanged();
                }
            }
        }

    
        /// <summary>
        /// hora para iniciar a hacer citas
        /// 
        /// 
        /// </summary>
        [Column(Name = @"hora_fin", Storage = "_HoraFin", DbType = "TIME", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.TimeSpan> HoraFin
        {
            get
            {
                return this._HoraFin;
            }
            set
            {
                if (this._HoraFin != value)
                {
                    this.OnHoraFinChanging(value);
                    this.SendPropertyChanging("HoraFin");
                    this._HoraFin = value;
                    this.SendPropertyChanged("HoraFin");
                    this.OnHoraFinChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.HojaDeVida in the schema.
    /// </summary>
    [Table(Name = @"hospital.hoja_de_vida")]
    public partial class HojaDeVida : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdHv;

        private string _PerfilProfesional;

        private string _Bachiller;

        private string _Universidad;

        private string _OtrosEstudios;

        private string _Fellows;

        private string _Idiomas;

        private string _Experiencia;

        private int _IdDoctor;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdHvChanging(int value);
        partial void OnIdHvChanged();
        partial void OnPerfilProfesionalChanging(string value);
        partial void OnPerfilProfesionalChanged();
        partial void OnBachillerChanging(string value);
        partial void OnBachillerChanged();
        partial void OnUniversidadChanging(string value);
        partial void OnUniversidadChanged();
        partial void OnOtrosEstudiosChanging(string value);
        partial void OnOtrosEstudiosChanged();
        partial void OnFellowsChanging(string value);
        partial void OnFellowsChanged();
        partial void OnIdiomasChanging(string value);
        partial void OnIdiomasChanged();
        partial void OnExperienciaChanging(string value);
        partial void OnExperienciaChanged();
        partial void OnIdDoctorChanging(int value);
        partial void OnIdDoctorChanged();
        #endregion

        public HojaDeVida()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdHv in the schema.
        /// </summary>
        [Column(Name = @"id_hv", Storage = "_IdHv", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdHv
        {
            get
            {
                return this._IdHv;
            }
            set
            {
                if (this._IdHv != value)
                {
                    this.OnIdHvChanging(value);
                    this.SendPropertyChanging("IdHv");
                    this._IdHv = value;
                    this.SendPropertyChanged("IdHv");
                    this.OnIdHvChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PerfilProfesional in the schema.
        /// </summary>
        [Column(Name = @"perfil_profesional", Storage = "_PerfilProfesional", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PerfilProfesional
        {
            get
            {
                return this._PerfilProfesional;
            }
            set
            {
                if (this._PerfilProfesional != value)
                {
                    this.OnPerfilProfesionalChanging(value);
                    this.SendPropertyChanging("PerfilProfesional");
                    this._PerfilProfesional = value;
                    this.SendPropertyChanged("PerfilProfesional");
                    this.OnPerfilProfesionalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Bachiller in the schema.
        /// </summary>
        [Column(Name = @"bachiller", Storage = "_Bachiller", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Bachiller
        {
            get
            {
                return this._Bachiller;
            }
            set
            {
                if (this._Bachiller != value)
                {
                    this.OnBachillerChanging(value);
                    this.SendPropertyChanging("Bachiller");
                    this._Bachiller = value;
                    this.SendPropertyChanged("Bachiller");
                    this.OnBachillerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Universidad in the schema.
        /// </summary>
        [Column(Name = @"universidad", Storage = "_Universidad", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Universidad
        {
            get
            {
                return this._Universidad;
            }
            set
            {
                if (this._Universidad != value)
                {
                    this.OnUniversidadChanging(value);
                    this.SendPropertyChanging("Universidad");
                    this._Universidad = value;
                    this.SendPropertyChanged("Universidad");
                    this.OnUniversidadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OtrosEstudios in the schema.
        /// </summary>
        [Column(Name = @"otros_estudios", Storage = "_OtrosEstudios", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string OtrosEstudios
        {
            get
            {
                return this._OtrosEstudios;
            }
            set
            {
                if (this._OtrosEstudios != value)
                {
                    this.OnOtrosEstudiosChanging(value);
                    this.SendPropertyChanging("OtrosEstudios");
                    this._OtrosEstudios = value;
                    this.SendPropertyChanged("OtrosEstudios");
                    this.OnOtrosEstudiosChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fellows in the schema.
        /// </summary>
        [Column(Name = @"fellows", Storage = "_Fellows", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Fellows
        {
            get
            {
                return this._Fellows;
            }
            set
            {
                if (this._Fellows != value)
                {
                    this.OnFellowsChanging(value);
                    this.SendPropertyChanging("Fellows");
                    this._Fellows = value;
                    this.SendPropertyChanged("Fellows");
                    this.OnFellowsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Idiomas in the schema.
        /// </summary>
        [Column(Name = @"idiomas", Storage = "_Idiomas", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Idiomas
        {
            get
            {
                return this._Idiomas;
            }
            set
            {
                if (this._Idiomas != value)
                {
                    this.OnIdiomasChanging(value);
                    this.SendPropertyChanging("Idiomas");
                    this._Idiomas = value;
                    this.SendPropertyChanged("Idiomas");
                    this.OnIdiomasChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Experiencia in the schema.
        /// </summary>
        [Column(Name = @"experiencia", Storage = "_Experiencia", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Experiencia
        {
            get
            {
                return this._Experiencia;
            }
            set
            {
                if (this._Experiencia != value)
                {
                    this.OnExperienciaChanging(value);
                    this.SendPropertyChanging("Experiencia");
                    this._Experiencia = value;
                    this.SendPropertyChanged("Experiencia");
                    this.OnExperienciaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdDoctor in the schema.
        /// </summary>
        [Column(Name = @"id_doctor", Storage = "_IdDoctor", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdDoctor
        {
            get
            {
                return this._IdDoctor;
            }
            set
            {
                if (this._IdDoctor != value)
                {
                    this.OnIdDoctorChanging(value);
                    this.SendPropertyChanging("IdDoctor");
                    this._IdDoctor = value;
                    this.SendPropertyChanged("IdDoctor");
                    this.OnIdDoctorChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.Cirucita in the schema.
    /// </summary>
    [Table(Name = @"hospital.cirucitas")]
    public partial class Cirucita : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCirucitas;

        private System.Nullable<System.DateTime> _Fecha;

        private string _Descripcion;

        private System.Nullable<int> _IdUsuario;

        private System.Nullable<int> _IdCita;

        private System.Nullable<int> _IdCirugia;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCirucitasChanging(int value);
        partial void OnIdCirucitasChanged();
        partial void OnFechaChanging(System.Nullable<System.DateTime> value);
        partial void OnFechaChanged();
        partial void OnDescripcionChanging(string value);
        partial void OnDescripcionChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        partial void OnIdCitaChanging(System.Nullable<int> value);
        partial void OnIdCitaChanged();
        partial void OnIdCirugiaChanging(System.Nullable<int> value);
        partial void OnIdCirugiaChanged();
        #endregion

        public Cirucita()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCirucitas in the schema.
        /// </summary>
        [Column(Name = @"id_cirucitas", Storage = "_IdCirucitas", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCirucitas
        {
            get
            {
                return this._IdCirucitas;
            }
            set
            {
                if (this._IdCirucitas != value)
                {
                    this.OnIdCirucitasChanging(value);
                    this.SendPropertyChanging("IdCirucitas");
                    this._IdCirucitas = value;
                    this.SendPropertyChanged("IdCirucitas");
                    this.OnIdCirucitasChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fecha in the schema.
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", DbType = "DATE", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Descripcion in the schema.
        /// </summary>
        [Column(Name = @"descripcion", Storage = "_Descripcion", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.OnDescripcionChanging(value);
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                    this.OnDescripcionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCita in the schema.
        /// </summary>
        [Column(Name = @"id_cita", Storage = "_IdCita", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCita
        {
            get
            {
                return this._IdCita;
            }
            set
            {
                if (this._IdCita != value)
                {
                    this.OnIdCitaChanging(value);
                    this.SendPropertyChanging("IdCita");
                    this._IdCita = value;
                    this.SendPropertyChanged("IdCita");
                    this.OnIdCitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCirugia in the schema.
        /// </summary>
        [Column(Name = @"id_cirugia", Storage = "_IdCirugia", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCirugia
        {
            get
            {
                return this._IdCirugia;
            }
            set
            {
                if (this._IdCirugia != value)
                {
                    this.OnIdCirugiaChanging(value);
                    this.SendPropertyChanging("IdCirugia");
                    this._IdCirugia = value;
                    this.SendPropertyChanged("IdCirugia");
                    this.OnIdCirugiaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// tabla intermedia entre cita y medicinas
    /// </summary>
    [Table(Name = @"hospital.medicita")]
    public partial class Medicita : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdMedicita;

        private System.Nullable<int> _IdMedicina;

        private System.Nullable<int> _IdUsuario;

        private string _Dosis;

        private System.Nullable<System.DateTime> _FechaInicio;

        private System.Nullable<int> _IdCita;

        private string _FechaFin;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdMedicitaChanging(int value);
        partial void OnIdMedicitaChanged();
        partial void OnIdMedicinaChanging(System.Nullable<int> value);
        partial void OnIdMedicinaChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        partial void OnDosisChanging(string value);
        partial void OnDosisChanged();
        partial void OnFechaInicioChanging(System.Nullable<System.DateTime> value);
        partial void OnFechaInicioChanged();
        partial void OnIdCitaChanging(System.Nullable<int> value);
        partial void OnIdCitaChanged();
        partial void OnFechaFinChanging(string value);
        partial void OnFechaFinChanged();
        #endregion

        public Medicita()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdMedicita in the schema.
        /// </summary>
        [Column(Name = @"id_medicita", Storage = "_IdMedicita", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdMedicita
        {
            get
            {
                return this._IdMedicita;
            }
            set
            {
                if (this._IdMedicita != value)
                {
                    this.OnIdMedicitaChanging(value);
                    this.SendPropertyChanging("IdMedicita");
                    this._IdMedicita = value;
                    this.SendPropertyChanged("IdMedicita");
                    this.OnIdMedicitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdMedicina in the schema.
        /// </summary>
        [Column(Name = @"id_medicina", Storage = "_IdMedicina", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdMedicina
        {
            get
            {
                return this._IdMedicina;
            }
            set
            {
                if (this._IdMedicina != value)
                {
                    this.OnIdMedicinaChanging(value);
                    this.SendPropertyChanging("IdMedicina");
                    this._IdMedicina = value;
                    this.SendPropertyChanged("IdMedicina");
                    this.OnIdMedicinaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dosis in the schema.
        /// </summary>
        [Column(Name = @"dosis", Storage = "_Dosis", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Dosis
        {
            get
            {
                return this._Dosis;
            }
            set
            {
                if (this._Dosis != value)
                {
                    this.OnDosisChanging(value);
                    this.SendPropertyChanging("Dosis");
                    this._Dosis = value;
                    this.SendPropertyChanged("Dosis");
                    this.OnDosisChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaInicio in the schema.
        /// </summary>
        [Column(Name = @"fecha_inicio", Storage = "_FechaInicio", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> FechaInicio
        {
            get
            {
                return this._FechaInicio;
            }
            set
            {
                if (this._FechaInicio != value)
                {
                    this.OnFechaInicioChanging(value);
                    this.SendPropertyChanging("FechaInicio");
                    this._FechaInicio = value;
                    this.SendPropertyChanged("FechaInicio");
                    this.OnFechaInicioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCita in the schema.
        /// </summary>
        [Column(Name = @"id_cita", Storage = "_IdCita", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdCita
        {
            get
            {
                return this._IdCita;
            }
            set
            {
                if (this._IdCita != value)
                {
                    this.OnIdCitaChanging(value);
                    this.SendPropertyChanging("IdCita");
                    this._IdCita = value;
                    this.SendPropertyChanged("IdCita");
                    this.OnIdCitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaFin in the schema.
        /// </summary>
        [Column(Name = @"fecha_fin", Storage = "_FechaFin", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string FechaFin
        {
            get
            {
                return this._FechaFin;
            }
            set
            {
                if (this._FechaFin != value)
                {
                    this.OnFechaFinChanging(value);
                    this.SendPropertyChanging("FechaFin");
                    this._FechaFin = value;
                    this.SendPropertyChanged("FechaFin");
                    this.OnFechaFinChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.Horario in the schema.
    /// </summary>
    [Table(Name = @"hospital.horario")]
    public partial class Horario : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdHorario;

        private System.DateTime _FechaInicio;

        private System.DateTime _FechaFin;

        private System.Nullable<int> _IdUsuario;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdHorarioChanging(int value);
        partial void OnIdHorarioChanged();
        partial void OnFechaInicioChanging(System.DateTime value);
        partial void OnFechaInicioChanged();
        partial void OnFechaFinChanging(System.DateTime value);
        partial void OnFechaFinChanged();
        partial void OnIdUsuarioChanging(System.Nullable<int> value);
        partial void OnIdUsuarioChanged();
        #endregion

        public Horario()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdHorario in the schema.
        /// </summary>
        [Column(Name = @"id_horario", Storage = "_IdHorario", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdHorario
        {
            get
            {
                return this._IdHorario;
            }
            set
            {
                if (this._IdHorario != value)
                {
                    this.OnIdHorarioChanging(value);
                    this.SendPropertyChanging("IdHorario");
                    this._IdHorario = value;
                    this.SendPropertyChanged("IdHorario");
                    this.OnIdHorarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaInicio in the schema.
        /// </summary>
        [Column(Name = @"fecha_inicio", Storage = "_FechaInicio", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime FechaInicio
        {
            get
            {
                return this._FechaInicio;
            }
            set
            {
                if (this._FechaInicio != value)
                {
                    this.OnFechaInicioChanging(value);
                    this.SendPropertyChanging("FechaInicio");
                    this._FechaInicio = value;
                    this.SendPropertyChanged("FechaInicio");
                    this.OnFechaInicioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FechaFin in the schema.
        /// </summary>
        [Column(Name = @"fecha_fin", Storage = "_FechaFin", CanBeNull = false, DbType = "TIMESTAMP NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime FechaFin
        {
            get
            {
                return this._FechaFin;
            }
            set
            {
                if (this._FechaFin != value)
                {
                    this.OnFechaFinChanging(value);
                    this.SendPropertyChanging("FechaFin");
                    this._FechaFin = value;
                    this.SendPropertyChanged("FechaFin");
                    this.OnFechaFinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUsuario in the schema.
        /// </summary>
        [Column(Name = @"id_usuario", Storage = "_IdUsuario", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IdUsuario
        {
            get
            {
                return this._IdUsuario;
            }
            set
            {
                if (this._IdUsuario != value)
                {
                    this.OnIdUsuarioChanging(value);
                    this.SendPropertyChanging("IdUsuario");
                    this._IdUsuario = value;
                    this.SendPropertyChanged("IdUsuario");
                    this.OnIdUsuarioChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Medicapp13Context.Cita in the schema.
    /// </summary>
    [Table(Name = @"hospital.cita")]
    public partial class Cita : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCita;

        private System.Nullable<int> _DoctorId;

        private string _Diagnostico;

        private System.Nullable<int> _PacienteId;

        private System.Nullable<System.DateTime> _HoraInicio;

        private System.Nullable<System.DateTime> _HoraFin;

        private System.Nullable<int> _Estado = 0;

        private string _Tipo;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCitaChanging(int value);
        partial void OnIdCitaChanged();
        partial void OnDoctorIdChanging(System.Nullable<int> value);
        partial void OnDoctorIdChanged();
        partial void OnDiagnosticoChanging(string value);
        partial void OnDiagnosticoChanged();
        partial void OnPacienteIdChanging(System.Nullable<int> value);
        partial void OnPacienteIdChanged();
        partial void OnHoraInicioChanging(System.Nullable<System.DateTime> value);
        partial void OnHoraInicioChanged();
        partial void OnHoraFinChanging(System.Nullable<System.DateTime> value);
        partial void OnHoraFinChanged();
        partial void OnEstadoChanging(System.Nullable<int> value);
        partial void OnEstadoChanged();
        partial void OnTipoChanging(string value);
        partial void OnTipoChanged();
        #endregion

        public Cita()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCita in the schema.
        /// </summary>
        [Column(Name = @"id_cita", Storage = "_IdCita", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCita
        {
            get
            {
                return this._IdCita;
            }
            set
            {
                if (this._IdCita != value)
                {
                    this.OnIdCitaChanging(value);
                    this.SendPropertyChanging("IdCita");
                    this._IdCita = value;
                    this.SendPropertyChanged("IdCita");
                    this.OnIdCitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DoctorId in the schema.
        /// </summary>
        [Column(Name = @"doctor_id", Storage = "_DoctorId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> DoctorId
        {
            get
            {
                return this._DoctorId;
            }
            set
            {
                if (this._DoctorId != value)
                {
                    this.OnDoctorIdChanging(value);
                    this.SendPropertyChanging("DoctorId");
                    this._DoctorId = value;
                    this.SendPropertyChanged("DoctorId");
                    this.OnDoctorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Diagnostico in the schema.
        /// </summary>
        [Column(Name = @"diagnostico", Storage = "_Diagnostico", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Diagnostico
        {
            get
            {
                return this._Diagnostico;
            }
            set
            {
                if (this._Diagnostico != value)
                {
                    this.OnDiagnosticoChanging(value);
                    this.SendPropertyChanging("Diagnostico");
                    this._Diagnostico = value;
                    this.SendPropertyChanged("Diagnostico");
                    this.OnDiagnosticoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PacienteId in the schema.
        /// </summary>
        [Column(Name = @"paciente_id", Storage = "_PacienteId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PacienteId
        {
            get
            {
                return this._PacienteId;
            }
            set
            {
                if (this._PacienteId != value)
                {
                    this.OnPacienteIdChanging(value);
                    this.SendPropertyChanging("PacienteId");
                    this._PacienteId = value;
                    this.SendPropertyChanged("PacienteId");
                    this.OnPacienteIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HoraInicio in the schema.
        /// </summary>
        [Column(Name = @"hora_inicio", Storage = "_HoraInicio", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> HoraInicio
        {
            get
            {
                return this._HoraInicio;
            }
            set
            {
                if (this._HoraInicio != value)
                {
                    this.OnHoraInicioChanging(value);
                    this.SendPropertyChanging("HoraInicio");
                    this._HoraInicio = value;
                    this.SendPropertyChanged("HoraInicio");
                    this.OnHoraInicioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HoraFin in the schema.
        /// </summary>
        [Column(Name = @"hora_fin", Storage = "_HoraFin", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> HoraFin
        {
            get
            {
                return this._HoraFin;
            }
            set
            {
                if (this._HoraFin != value)
                {
                    this.OnHoraFinChanging(value);
                    this.SendPropertyChanging("HoraFin");
                    this._HoraFin = value;
                    this.SendPropertyChanged("HoraFin");
                    this.OnHoraFinChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Estado in the schema.
        /// </summary>
        [Column(Name = @"estado", Storage = "_Estado", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Estado
        {
            get
            {
                return this._Estado;
            }
            set
            {
                if (this._Estado != value)
                {
                    this.OnEstadoChanging(value);
                    this.SendPropertyChanging("Estado");
                    this._Estado = value;
                    this.SendPropertyChanged("Estado");
                    this.OnEstadoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tipo in the schema.
        /// </summary>
        [Column(Name = @"tipo", Storage = "_Tipo", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Tipo
        {
            get
            {
                return this._Tipo;
            }
            set
            {
                if (this._Tipo != value)
                {
                    this.OnTipoChanging(value);
                    this.SendPropertyChanging("Tipo");
                    this._Tipo = value;
                    this.SendPropertyChanged("Tipo");
                    this.OnTipoChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
